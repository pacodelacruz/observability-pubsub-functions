{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "maxLength": 16,
      "metadata": {
        "description": "Used to name the different components of the Sample App. I.e. the Function App, the consumption plan, Application Insights, Service Bus, and the Azure Storage account. Bear in mind that many of these resources require a globally unique name"
      }
    },
    "queueName": {
      "type": "string",
      "defaultValue": "userupdate-evt",    
      "metadata": {
        "description": "Queue name for the pub/sub pattern."
      }
    },
    "queueMaxDeliveryCount": {
      "type": "int",
      "defaultValue": 2,    
      "metadata": {
        "description": "Max delivery count for the queue"
      }
    }
  },
  "variables": {
    "functionAppName": "[concat('fncapp-', parameters('appName'))]",
    "hostingPlanName": "[concat('asplan-', parameters('appName'))]",
    "applicationInsightsName": "[concat('appins-', parameters('appName'))]",
    "workbookName": "9ac0d31a-9d1c-9d1c-9d1c-9ac0d31ac777",
    "workbookDisplayName": "Tracing",
    "serviceBusName": "[concat('sbus-', parameters('appName'))]",
    "repoURL": "https://github.com/pacodelacruz/observability-pubsub-functions.git",
    "branch": "master",
    "storageAccountSuffix": "[replace(if(greaterOrEquals(length(parameters('appName')), 20), substring(parameters('appName'), 0, 20), substring(parameters('appName'), 0, length(parameters('appName')))), '-', '')]",
    "storageAccountName": "[concat('st', variables('storageAccountSuffix'), substring(uniquestring(resourceGroup().id), 0, 2))]",    
    "storageBlobContainerArchiveName": "archive",
    "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2019-06-01" ,
      "kind": "StorageV2",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
        "properties": {
          "accessTier": "Hot",
          "minimumTlsVersion": "TLS1_2",
          "supportsHttpsTrafficOnly": true   
      },
      "resources": [
        {
            "type": "blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat('default/', variables('storageBlobContainerArchiveName'))]",
            "dependsOn": [
                "[variables('storageAccountName')]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "managementPolicies",
            "apiVersion": "2019-06-01",
            "name": "default",
            "dependsOn": [
                "[variables('storageAccountName')]"
            ],
          "properties": {
            "policy": {
              "rules": [
                {
                  "enabled": true,
                  "name": "delete-old-blobs",
                  "type": "Lifecycle",
                  "definition": {
                    "actions": {
                      "baseBlob": {
                        "delete": {
                          "daysAfterModificationGreaterThan": 30
                        }
                      },
                      "snapshot": {
                        "delete": {
                          "daysAfterCreationGreaterThan": 30
                        }
                      }
                    },
                    "filters": {
                      "prefixMatch": [
                        "[concat(variables('storageBlobContainerArchiveName'), '/')]"
                      ],
                      "blobTypes": [
                        "blockBlob"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "properties": {
        "perSiteScaling": false,
        "reserved": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "microsoft.insights/components",
      "name": "[variables('applicationInsightsName')]",
      "apiVersion": "2018-05-01-preview",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('applicationInsightsName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "RetentionInDays": 90
      }
    },
    {
      "type": "microsoft.insights/workbooks",
      "name": "[variables('workbookName')]",
      "apiVersion": "2018-06-17-preview",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('applicationInsightsName')]"
      ],
      "kind": "shared",
      "properties": {
        "displayName": "[variables('workbookDisplayName')]",
        "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Pub Sub Tracing\\n---\\n\\nObservability tracing charts and query result grids are contained in this workbook. Queries can be edited to add filters, e.g. by EntityType, EntityId, etc. To add filters to the provided queries, click on the _Log view_ button, uncomment the filters at the bottom, and add the relevant filter values. \"},\"name\":\"Title\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// Message Count per EntityType and time bin\\r\\ntraces \\r\\n| sort by timestamp desc \\r\\n| where customDimensions.EventName != \\\"\\\"\\r\\n| where tostring(customDimensions.prop__SpanCheckpointId) contains \\\"PublisherStart\\\"\\r\\n| project timestamp \\r\\n        , EntityType = tostring(customDimensions.prop__EntityType)\\r\\n| summarize Count = count(EntityType) \\r\\n        by bin(timestamp, 1h), \\r\\n           EntityType\\r\\n| sort by timestamp desc \",\"size\":0,\"showAnalytics\":true,\"title\":\"Message Count per Entity Type (Last 24 hours)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.insights/components\",\"visualization\":\"barchart\",\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"EntityType\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"Count\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"customWidth\":\"33\",\"name\":\"Message Count per Entity Type\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// Error Count grouped by InterfaceId\\r\\ntraces \\r\\n| sort by timestamp desc \\r\\n| where customDimensions.prop__Status == \\\"Failed\\\"\\r\\n| where customDimensions.EventName != \\\"\\\"\\r\\n| where tostring(customDimensions.prop__InterfaceId) != \\\"\\\"\\r\\n| project EventName = tostring(customDimensions.EventName)\\r\\n        , InterfaceId = tostring(customDimensions.prop__InterfaceId)\\r\\n| summarize Count = count(EventName) \\r\\n        by InterfaceId\",\"size\":0,\"showAnalytics\":true,\"title\":\"Error Count by Interface Id (Last 24 hours)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.insights/components\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"Error Count by Interface Id (Last 24 hours)\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// Error Count grouped by EventName\\r\\ntraces \\r\\n| sort by timestamp desc \\r\\n| where customDimensions.prop__Status == \\\"Failed\\\"\\r\\n| where customDimensions.EventName != \\\"\\\"\\r\\n| where tostring(customDimensions.prop__InterfaceId) != \\\"\\\"\\r\\n| project EventName = tostring(customDimensions.EventName)\\r\\n        , InterfaceId = tostring(customDimensions.prop__InterfaceId)\\r\\n| summarize Count = count(EventName) \\r\\n        by EventName\",\"size\":0,\"showAnalytics\":true,\"title\":\"Error Count by Interface Id (Last 24 hours)\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"queryType\":0,\"resourceType\":\"microsoft.insights/components\",\"visualization\":\"piechart\"},\"customWidth\":\"33\",\"name\":\"Error Count by EntityName (Last 24 hours) - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// Traces with failed status\\r\\ntraces \\r\\n| sort by timestamp desc\\r\\n| where customDimensions.prop__Status == \\\"Failed\\\"\\r\\n| project \\r\\n          timestamp\\r\\n        , InterfaceId = customDimensions.prop__InterfaceId\\r\\n        , EntityType = customDimensions.prop__EntityType\\r\\n        , EntityId  = customDimensions.prop__EntityId\\r\\n        , EventName = customDimensions.EventName\\r\\n        , Message = customDimensions.prop__Message\\r\\n        , SpanCheckpointId = customDimensions.prop__SpanCheckpointId\\r\\n        , DeliveryCount = customDimensions.prop__DeliveryCount\\r\\n        , Component = operation_Name\\r\\n        , BatchId = customDimensions.prop__BatchId\\r\\n        , CorrelationId = customDimensions.prop__CorrelationId\\r\\n// Optional filters, uncomment if/when required\\r\\n//| where CorrelationId contains \\\"\\\" // Filters based on the correlationId, which includes the customer provided batchId and the Azure Function involcationId \\r\\n//| where InterfaceId contains \\\"\\\" // Filters based on the InterfaceId\\r\\n//| where EntityType == \\\"\\\" // Filters based on the EntityType \\r\\n//| where EntityId == \\\"\\\" // Filters based on the EntityId\",\"size\":0,\"showAnalytics\":true,\"title\":\"Failed Traces\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.insights/components\",\"visualization\":\"table\"},\"name\":\"Failed Traces\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"expandable\":true,\"expanded\":true,\"loadType\":\"explicit\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// Error Count grouped by InterfaceId and trace event type (EventName) \\r\\ntraces \\r\\n| sort by timestamp desc \\r\\n| where customDimensions.prop__Status == \\\"Failed\\\"\\r\\n| where customDimensions.EventName != \\\"\\\"\\r\\n| where tostring(customDimensions.prop__InterfaceId) != \\\"\\\"\\r\\n| project EventName = tostring(customDimensions.EventName)\\r\\n        , InterfaceId = tostring(customDimensions.prop__InterfaceId)\\r\\n| summarize Count = count(EventName) \\r\\n        by  EventName\",\"size\":0,\"showAnalytics\":true,\"title\":\"Error Count by EventId\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.insights/components\",\"visualization\":\"piechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"EventName\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"EventName\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"Count\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"showPin\":true,\"name\":\"Error Count by EventId\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// Error Count grouped by InterfaceId and trace event type (EventName) \\r\\ntraces \\r\\n| sort by timestamp desc \\r\\n| where customDimensions.prop__Status == \\\"Failed\\\"\\r\\n| where customDimensions.EventName != \\\"\\\"\\r\\n| where tostring(customDimensions.prop__InterfaceId) != \\\"\\\"\\r\\n| project EventName = tostring(customDimensions.EventName)\\r\\n        , InterfaceId = tostring(customDimensions.prop__InterfaceId)\\r\\n| summarize Count = count(EventName) \\r\\n        by  InterfaceId\",\"size\":0,\"showAnalytics\":true,\"title\":\"Error Count by InterfaceId\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.insights/components\",\"visualization\":\"piechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"EventName\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"EventName\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"Count\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"customWidth\":\"50\",\"showPin\":true,\"name\":\"Error Count byInterfaceId\"}]},\"customWidth\":\"33\",\"name\":\"Error Charts\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"//All trace events related to the 'BatchPublisher' span\\ntraces \\n| sort by timestamp desc \\n| where customDimensions.prop__SpanCheckpointId == 'BatchPublisherStart'\\n| project BatchPublisherStart = timestamp\\n        , BatchPublisherStartLevel = customDimensions.LogLevel \\n        , InterfaceId = customDimensions.prop__InterfaceId\\n        , EntityType = customDimensions.prop__EntityType\\n        , BatchId = tostring(customDimensions.prop__BatchId)\\n        , BatchPublisherStartStatus = customDimensions.prop__Status\\n| join kind = leftouter (     \\n    traces       \\n    | where customDimensions.prop__SpanCheckpointId == 'BatchPublisherFinish'   \\n    | project BatchPublisherFinish = timestamp   \\n            , BatchPublisherBatchId = tostring(customDimensions.prop__BatchId)\\n            , BatchPublisherFinishLevel = customDimensions.LogLevel \\n            , EntityId = customDimensions.prop__EntityId\\n            , BatchPublisherFinishStatus = customDimensions.prop__Status\\n            , RecordCount = customDimensions.prop__RecordCount            \\n        ) on $left.BatchId == $right.BatchPublisherBatchId\\n| sort by BatchPublisherStart desc\\n| project \\n          BatchPublisherStart\\n        , InterfaceId\\n        , EntityType\\n        , BatchId\\n        , EntityId\\n        , RecordCount\\n        , BatchPublisherStartStatus\\n        , BatchPublisherFinishStatus\\n// Optional filters, uncomment if/when required\\n//| where InterfaceId contains \\\"\\\" // Filters based on the InterfaceId\\n//| where EntityType == \\\"\\\" // Filters based on the EntityType \\n//| where EntityId == \\\"159487280007\\\" // Filters based on the EntityId\",\"size\":0,\"showAnalytics\":true,\"title\":\"Batch Publisher Traces\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.insights/components\",\"visualization\":\"table\",\"showExpandCollapseGrid\":true,\"gridSettings\":{\"rowLimit\":50}},\"name\":\"Batch Publisher Traces\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"// Correlated traces\\r\\n// Joins the traces of the key spans in the lifespan of a message. \\r\\n// For those messages that are retried in the Susbcriber span, it shows the values of the last recorded attempt. \\r\\ntraces \\r\\n| sort by timestamp desc \\r\\n| where customDimensions.prop__SpanCheckpointId == 'PublisherStart'\\r\\n| project   EntityType = tostring(customDimensions.prop__EntityType)\\r\\n          , PublisherInterfaceId = tostring(customDimensions.prop__InterfaceId)\\r\\n          , EntityId = tostring(customDimensions.prop__EntityId)\\r\\n          , BatchId = tostring(customDimensions.prop__BatchId)\\r\\n          , CorrelationId = tostring(customDimensions.prop__CorrelationId)\\r\\n          , PublisherStartLogLevel = customDimensions.LogLevel \\r\\n          , PublisherStartEventName = customDimensions.EventName\\r\\n          , PublisherStartTimestamp = timestamp \\r\\n          , PublisherComponent = operation_Name\\r\\n          , PublisherStartStatus = tostring(customDimensions.prop__Status)\\r\\n| join kind = leftouter (     \\r\\n    traces \\r\\n    | sort by timestamp desc\\r\\n    | where customDimensions.prop__SpanCheckpointId == 'PublisherFinish'\\r\\n    | project PublisherFinishLogLevel = customDimensions.LogLevel \\r\\n            , PublisherFinishEventName = customDimensions.EventName\\r\\n            , PublisherFinishStatus = tostring(customDimensions.prop__Status)\\r\\n            , PublisherFinishTimestamp = timestamp \\r\\n            , CorrelationId = tostring(customDimensions.prop__CorrelationId)\\r\\n    ) on $left.CorrelationId == $right.CorrelationId\\r\\n| join kind = leftouter (     \\r\\n    traces \\r\\n    | sort by timestamp desc\\r\\n    | where customDimensions.prop__SpanCheckpointId == 'SubscriberStart'\\r\\n    | project SubscriberStartLogLevel = customDimensions.LogLevel \\r\\n            , SubscriberInterfaceId = tostring(customDimensions.prop__InterfaceId)\\r\\n            , SubscriberStartEventName = customDimensions.EventName\\r\\n            , SubscriberComponent = operation_Name\\r\\n            , SubscriberStartStatus = tostring(customDimensions.prop__Status)\\r\\n            , SubscriberStartDeliveryCount = tostring(customDimensions.prop__DeliveryCount)\\r\\n            , SubscriberStartTimestamp = timestamp \\r\\n            , CorrelationId = tostring(customDimensions.prop__CorrelationId)\\r\\n        | join kind = inner ( // To get only the last attempt of the span\\r\\n            traces\\r\\n            | where customDimensions.prop__SpanCheckpointId == 'SubscriberStart'\\r\\n            | summarize   SubscriberStartDeliveryCount = max(tostring(customDimensions.prop__DeliveryCount))\\r\\n                        by CorrelationId = tostring(customDimensions.prop__CorrelationId)\\r\\n                        , operation_Name // in case of multiple subscribers\\r\\n        ) on $left.CorrelationId == $right.CorrelationId, $left.SubscriberStartDeliveryCount == $right.SubscriberStartDeliveryCount\\r\\n    ) on $left.CorrelationId == $right.CorrelationId\\r\\n| join kind = leftouter (     \\r\\n    traces \\r\\n    | sort by timestamp desc\\r\\n    | where customDimensions.prop__SpanCheckpointId == 'SubscriberFinish'\\r\\n    | project SubscriberFinishLogLevel = customDimensions.LogLevel \\r\\n            , SubscriberFinishEventName = customDimensions.EventName\\r\\n            , SubscriberFinishStatus = customDimensions.prop__Status\\r\\n            , SubscriberFinishDeliveryCount = tostring(customDimensions.prop__DeliveryCount)\\r\\n            , SubscriberFinishTimestamp = timestamp \\r\\n            , CorrelationId = tostring(customDimensions.prop__CorrelationId)\\r\\n        | join kind = inner (  // To get only the last attempt of the span\\r\\n            traces\\r\\n            | where customDimensions.prop__SpanCheckpointId == 'SubscriberFinish'\\r\\n            | summarize   SubscriberFinishDeliveryCount = max(tostring(customDimensions.prop__DeliveryCount))\\r\\n                        by CorrelationId = tostring(customDimensions.prop__CorrelationId)\\r\\n                        , operation_Name // in case of multiple subscribers\\r\\n        ) on $left.CorrelationId == $right.CorrelationId, $left.SubscriberFinishDeliveryCount == $right.SubscriberFinishDeliveryCount\\r\\n    ) on $left.CorrelationId == $right.CorrelationId    \\r\\n| project \\r\\n          PublisherStartTimestamp\\r\\n        , BatchId \\r\\n        , CorrelationId \\r\\n        , PublisherInterfaceId\\r\\n        , SubscriberInterfaceId\\r\\n        , EntityType\\r\\n        , EntityId \\r\\n        , PublisherStartEventName\\r\\n        , PublisherFinishEventName\\r\\n        , SubscriberStartEventName\\r\\n        , SubscriberFinishEventName\\r\\n        , PublisherStartStatus \\r\\n        , PublisherFinishStatus \\r\\n        , SubscriberStartStatus\\r\\n        , SubscriberFinishStatus\\r\\n        , SubscriberStartDeliveryCount\\r\\n        , SubscriberFinishDeliveryCount\\r\\n| sort by PublisherStartTimestamp desc\\r\\n// Optional filters, uncomment if/when required\\r\\n//| where BatchId == \\\"\\\"\\r\\n//| where CorrelationId contains \\\"\\\" // Filters based on the correlationId, which includes the customer provided batchId and the Azure Function involcationId \\r\\n//| where EntityType == \\\"\\\" // Filters based on the EntityType \\r\\n//| where EntityId == \\\"\\\" // Filters based on the EntityId\\r\\n//| where PublisherInterfaceId contains \\\"\\\" // Filters based on the PublisherInterfaceId\\r\\n//| where SubscriberInterfaceId contains \\\"\\\" // Filters based on the SubscriberInterfaceId\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Correlated Traces\",\"timeContext\":{\"durationMs\":86400000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.insights/components\"},\"name\":\"Correlated Traces\"}],\"isLocked\":false}",
        "version": "1.0",
        "sourceId": "[resourceId('microsoft.insights/components', variables('applicationInsightsName'))]",
        "category": "tsg"
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "name": "[variables('serviceBusName')]",
      "apiVersion": "2018-01-01-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "zoneRedundant": false
      },      
      "sku": {  
        "name": "Standard",
        "tier": "Standard"
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "name": "[concat(variables('serviceBusName'), '/', parameters('queueName'))]",
      "apiVersion": "2017-04-01",
      "properties": {
        "lockDuration": "PT1M",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P1D",
        "deadLetteringOnMessageExpiration": true,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": "[parameters('queueMaxDeliveryCount')]",
        "enablePartitioning": false,
        "enableExpress": false
      },
      "dependsOn": [
          "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ]
    },  
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('functionAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2018-05-01-preview').InstrumentationKey]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "WEBSITE_MAX_DYNAMIC_APPLICATION_SCALE_OUT",
              "value": "1"
            },
            {
              "name": "WEBSITE_TIME_ZONE",
              "value": "AUS Eastern Standard Time"
            },
            {
              "name": "BaseUrl",
              "value": "[concat('https://', variables('functionAppName'), '.azurewebsites.net')]"
            },
            {
              "name": "ServiceBusConnectionString",
              "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', variables('serviceBusName'), 'RootManageSharedAccessKey'),'2017-04-01').primaryConnectionString]"
            },
            {
              "name": "ServiceBusUserUpdateQueueName",
              "value": "[parameters('queueName')]"
            },
            {
              "name": "ServiceBusUserUpdateQueueMaxDeliveryCount",
              "value": "[parameters('queueMaxDeliveryCount')]"
            },
            {
              "name": "StorageArchiveBlobContainer",
              "value": "[variables('storageBlobContainerArchiveName')]"
            },
            {
              "name": "TrafficGeneratorCron",
              "value": "0 */20 8-18 * * *"
            },
            {
              "name": "TrafficGeneratorDisabled",
              "value": "true"
            }
          ]
        }
      },
      "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
          "[resourceId('microsoft.insights/components', variables('applicationInsightsName'))]",
          "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ],
      "resources": [
        {
          "type": "sourcecontrols",
          "name": "GitHub",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[variables('repoURL')]",
            "branch": "[variables('branch')]",
            "IsManualIntegration": true
          }
        }
      ]
    }    
  ],
  "outputs": {}
}
